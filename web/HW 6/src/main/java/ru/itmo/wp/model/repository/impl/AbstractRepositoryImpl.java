package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.DatabaseObject;
import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.function.Function;

public abstract class AbstractRepositoryImpl {
    protected final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    protected String saveQueryFabric(String databaseName, String... argumentNames) {
        StringBuilder query = new StringBuilder();
        query.append("INSERT INTO ").append("`").append(databaseName).append("`").append(" (");
        for (int i = 0; i < argumentNames.length; i++) {
            query.append("`").append(argumentNames[i]).append("`");
            if (i != argumentNames.length - 1) {
                query.append(",");
            }
        }
        query.append(")").append(" VALUES (");
        for (int i = 0; i < argumentNames.length - 1; i++) {
            query.append("?").append(",");
        }
        query.append("NOW())");
        return query.toString();
    }

    protected <T extends DatabaseObject> void save(T object, String SQLQuery, Object... arguments) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(
                    SQLQuery,
                    Statement.RETURN_GENERATED_KEYS
            )) {
                for (int i = 0; i < arguments.length; i++) {
                    statement.setObject(i + 1, arguments[i]);
                }
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + object.getClass().getName() + ".");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        object.setId(generatedKeys.getLong(1));
                        object.setCreationTime(find(object.getId()).getCreationTime());
                    } else {
                        throw new RepositoryException("Can't save" + object.getClass().getName() +  "[no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + object.getClass().getName() + ".", e);
        }
    }

    protected interface ParserFunction<T extends DatabaseObject> {
         T parse(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;
    }
    protected  <T extends DatabaseObject> T find(long id, String databaseName, ParserFunction<T> resultParser) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + databaseName + " WHERE `id`=?")) {
                statement.setLong(1, id);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return resultParser.parse(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + databaseName + ".", e);
        }
    }

    public abstract  <T extends DatabaseObject> T find(long id);
}
